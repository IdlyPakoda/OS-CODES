/* Program for Round Robin CPU Scheduling With Waiting Time  
     /* IMPLEMENTATION OF ROUND ROBIN SCHEDULING 
     DESCRIPTION Each process gets a small unit of CPU time (time quantum),  
     usually 10-100 milliseconds. After this time has elapsed, the process is preempted  
    and added to the end of the ready queue. If there are n processes in the ready queue  
     and the time quantum is q, then each process gets 1/n of the CPU time in chunks of at most  
     q time units at once. No process waits more than (n 1)q time units. Performance q large: FIFO q small: q  
    must be large with respect to context switch, otherwise overhead is too high.*/ 
    /*Sample input and output: 
    enter no of processes: 3                                                                                                 
    enter the process name: p1                                                                                               
    enter the processing time: 6                                                                                             
    enter the process name: p2                                                                                               
    enter the processing time: 3                                                                                             
    enter the process name: p3                                                                                               
    enter the processing time: 9                                                                                             
   enter time slice: 3                                                                                                      
    process-name process-time waiting-time                                                                                   
     p1             6               6                                                                                        
     p2             3               3                                                                                        
     p3             9               9                                                                                        
     total waiting time = 18                                                                                                 
     average waiting time =  6.000000                                                                                    
    */ 
   /* Write your program here */ 


#include <stdio.h> 
void findWaitingTime(int processes[], int n, int burstTime[], int quantum, int waitingTime[], int turnaroundTime[]) { 
    int remainingTime[n]; 
    for (int i = 0; i < n; i++) { 
        remainingTime[i] = burstTime[i]; 
    } 
    int currentTime = 0; 
    while (1) { 
        int done = 1; 
        for (int i = 0; i < n; i++) { 
            if (remainingTime[i] > 0) { 
                done = 0; 
                if (remainingTime[i] > quantum) { 
                    currentTime += quantum; 
                    remainingTime[i] -= quantum; 
                } else { 
                    currentTime += remainingTime[i]; 
                    waitingTime[i] = currentTime - burstTime[i]; 
                    remainingTime[i] = 0; 
                    turnaroundTime[i] = currentTime; 
                } 
            } 
        } 
        if (done == 1) 
            break; 
    } 
} 
void findAverageTime(int processes[], int n, int burstTime[], int quantum) { 
    int waitingTime[n], turnaroundTime[n]; 
    int totalWaitingTime = 0, totalTurnaroundTime = 0; 
    findWaitingTime(processes, n, burstTime, quantum, waitingTime, turnaroundTime); 
    printf("\nProcess   Burst Time   Waiting Time   Turnaround Time\n"); 
    for (int i = 0; i < n; i++) { 
        totalWaitingTime += waitingTime[i]; 
        totalTurnaroundTime += turnaroundTime[i]; 
        printf("%d         %d            %d               %d\n", i + 1, burstTime[i], waitingTime[i], turnaroundTime[i]); 
    } 
    float avgWaitingTime = (float)totalWaitingTime / n; 
    float avgTurnaroundTime = (float)totalTurnaroundTime / n; 
    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime); 
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime); 
} 

int main() { 
    int n, quantum; 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
    int burstTime[n]; 
    printf("\nEnter the burst time for each process:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("Process %d: ", i + 1); 
        scanf("%d", &burstTime[i]); 
    } 
    printf("\nEnter the time quantum: "); 
    scanf("%d", &quantum); 
    findAverageTime(NULL, n, burstTime, quantum); 
    return 0; 
} 
